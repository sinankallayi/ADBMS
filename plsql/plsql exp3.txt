NoSQL – CRUD


1.Write a MongoDB query to create an INVOICE database and collections (CUSTOMER, PRODUCT) and its corresponding documents.


test> use invoice
switched to db invoice
invoice> db.createCollection("customer")
{ ok: 1 }
invoice> db.createCollection("product")
{ ok: 1 }
invoice> db.customer.insertOne({"id":"10001","name":"tinku"})
{
  acknowledged: true,
  insertedId: ObjectId('661387eaaf92cc6c12ef634b')
}
invoice> db.customer.insertMany([{"id":10002,"name":"minku","age":24},{"id":10003,"name":"pinku","age":21,"salary":35000}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('66138a6eaf92cc6c12ef634c'),
    '1': ObjectId('66138a6eaf92cc6c12ef634d')
  }
}
invoice> db.customer.insertMany([{"id":10004,"name":"binku","age":22},{"id":10005,"name":"jinku","age":28,"salary":30000}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('66138b8daf92cc6c12ef634e'),
    '1': ObjectId('66138b8daf92cc6c12ef634f')
  }
}
invoice> db.customer.insertMany([{"id":10006,"name":"sinku","age":25,"city":"calicut"},{"id":10007,"name":"ninku","age":29,"salary":25000,"city":"ekm"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('66138cc7af92cc6c12ef6350'),
    '1': ObjectId('66138cc7af92cc6c12ef6351')
  }
}
invoice> db.customer.insertMany([{"id":10008,"name":"linku","age":55,"city":"tvm"},{"id":10009,"name":"zinku","age":18,"salary":15000,"city":"tvm"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('66138dddaf92cc6c12ef6352'),
    '1': ObjectId('66138dddaf92cc6c12ef6353')
  }
}




2.Write a MongoDB query to find all documents from the collection CUSTOMER 


invoice> db.customer.find()
[
  {
    _id: ObjectId('661387eaaf92cc6c12ef634b'),
    id: '10001',
    name: 'tinku'
  },
  {
    _id: ObjectId('66138a6eaf92cc6c12ef634c'),
    id: 10002,
    name: 'minku',
    age: 24
  },
  {
    _id: ObjectId('66138a6eaf92cc6c12ef634d'),
    id: 10003,
    name: 'pinku',
    age: 21,
    salary: 35000
  },
  {
    _id: ObjectId('66138b8daf92cc6c12ef634e'),
    id: 10004,
    name: 'binku',
    age: 22
  },
  {
    _id: ObjectId('66138b8daf92cc6c12ef634f'),
    id: 10005,
    name: 'jinku',
    age: 28,
    salary: 30000
  },
  {
    _id: ObjectId('66138cc7af92cc6c12ef6350'),
    id: 10006,
    name: 'sinku',
    age: 25,
    city: 'calicut'
  },
  {
    _id: ObjectId('66138cc7af92cc6c12ef6351'),
    id: 10007,
    name: 'ninku',
    age: 29,
    salary: 25000,
    city: 'ekm'
  },
  {
    _id: ObjectId('66138dddaf92cc6c12ef6352'),
    id: 10008,
    name: 'linku',
    age: 55,
    city: 'tvm'
  },
  {
    _id: ObjectId('66138dddaf92cc6c12ef6353'),
    id: 10009,
    name: 'zinku',
    age: 18,
    salary: 15000,
    city: 'tvm'
  }
]



3.Write a MongoDB query to update the city in the collection CUSTOMER.


invoice> db.customer.updateOne({"city":"tvm"},{$set:{"city":"ekm"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}




4.Write a MongoDB query to delete the first matched document whose city is “Calicut”.


invoice> db.customer.deleteOne({"city":"calicut"})
{ acknowledged: true, deletedCount: 1 }

